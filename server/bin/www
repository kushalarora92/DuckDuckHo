const dotenv = require('dotenv');
const cluster = require('cluster');
const path = require('path');
const http = require('http');
const logger = require('bunyan').createLogger({ name: 'www_' });
const numWorkers = require('os').cpus().length;

const app = require('../app');

dotenv.config({
  path: path.resolve(__dirname, '../../config/.env'),
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const portNo = parseInt(val, 10);
  if (Number.isNaN(portNo)) /* named pipe */ return val;
  if (portNo >= 0) /* port number */ return portNo;
  return false;
}

/**
 * Get Port from environment ,and store in Express
 */
const port = normalizePort(process.env.PORT || 8080);
app.set('port', port);

/**
 * Create HTTP Server
 */
function createServer() {
  const server = http.createServer(app);

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const LOG_TAG = 'createServer_onError';

    const bind = typeof port === 'string'
      ? `Pipe ${port}`
      : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
      logger.error(`${LOG_TAG} ${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(`${LOG_TAG} ${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */
  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? `pipe ${addr}`
      : `port ${addr.port}`;
    logger.info(`Listening on ${bind}`);
  }

  /**
   * Listen on provided port, on all network interfaces
   */
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Setup Cluster
 */
function setupCluster() {
  if (!cluster.isMaster) {
    createServer();
    return;
  }

  const LOG_TAG = 'setupCluster';
  logger.info(`ENVIRONMENT: ${app.get('env')}`);
  logger.info(`${LOG_TAG} Master cluster setting up ${numWorkers} workers..`);

  for (let i = 0; i < numWorkers; i += 1) {
    cluster.fork();
  }

  cluster.on('online', (worker) => {
    logger.info(`${LOG_TAG} Worker PID: ${worker.process.pid} is online`);
  });

  cluster.on('exit', (worker, code, signal) => {
    logger.info(`${LOG_TAG} Worker ${worker.process.pid} died with code ${code}, and signal ${signal}`);
    logger.info(`${LOG_TAG} Starting a new worker`);
    cluster.fork();
  });
}

setupCluster();
